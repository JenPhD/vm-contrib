<?php
// $Id$

/**
* hook_help() implementation
* @param path which path of the site from which we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for path
*/
function volunteermatch_help($path, $arg) {
	$output = '';
	switch ($path) {
		case "admin/help#volunteermatch":
		$output = '<p>'. t("Provides access to the VolunteerMatch API") .'<p>';
		break;
	}
	return $output;
} // function volunteermatch_help()

function vm_reformatMethodName($base_string) {
	$formatted_string = ucfirst(ereg_replace("([A-Z])", " \\0", $base_string));
	return $formatted_string;
}

function vm_get_token() {
	$token = $_COOKIE('vm_token');
	
	if (empty($token)) {
		// provide form in which to enter username and password
		return drupal_get_form('vm_login');
	} else {
		return $token;
	}
}

function vm_login() {
	$form = array();
	
	$form['vm_username'] = array(
		'#type' => 'textfield',
		'#title' => t('Username'),
		'#default_value' => '',
		'#required' => TRUE
	);
	
	$form['vm_password'] = array(
		'#type' => 'password',
		'#title' => t('Password'),
		'#default_value' => '',
		'#required' => TRUE
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_login_submit($form, &$form_state) {
	$query = 'pk=' . urlencode($form_state['values']['vm_username']);
	$query .= '&pw=' . urlencode($form_state['values']['vm_password']);
	
	$xml = vm_sendVMRequest('GET', 'getLoginToken', $query);
	if ($xml->httpStatus != 200) {
		$page_content .= "Unable to load data. Incorrect username or password.";
		return $page_content;	
	}

	if (variable_get('vm_use_token', 0) != 0)
		setcookie('vm_token', '' . $xml->loginToken->token, time()+900, '/');
	setcookie('vm_username', urlencode($form_state['values']['vm_username']), time()+900, '/');

	$form_state['redirect'] = 'vm/getLoginToken/' . $form_state['values']['vm_username']; 	
}

function vm_logout() {
	setcookie('vm_token', '', time()-3600, '/');
	setcookie('vm_username', '', time()-3600, '/');
	
	drupal_set_message('Successfully logged out of VolunteerMatch.');
	drupal_goto();
}



function vm_get_metadata($type) {
	$data = variable_get('vm_'.$type, NULL);
	
	if (empty($data)) {
		// get the metadata from VolunteerMatch - catagories, partners, radii
		$data = vm_sendVMRequest('GET', 'getMetadata');
		
		foreach ($data->categories->category as $index => $category) {
			$categories['' . $category->attributes()->id] = '' . $category->name;
		}
		variable_set('vm_categories', $categories);

		$partners[''] = 'Everything';
		foreach ($data->partners->partner as $index => $partner) {
			$partners['' . $partner->attributes()->id] = '' . $partner->name;
		}
		variable_set('vm_partners', $partners);
		
		foreach ($data->radii->string as $index => $radius) {
			$radii[] = '' . $radius;
		}
		variable_set('vm_radii', $radii);
	} else {
		return $data;
	}
	
	return variable_get('vm_'.$type, NULL);
}

function vm_get_methods() {
	$methods = variable_get('vm_methods', NULL);
	
	if (empty($methods)) {
		// get available methods from VolunteerMatch using keyStatus API
		$methods = VolunteerMatchAPI::getMethods();
		if (empty($methods))
			return NULL;
		
		variable_set('vm_methods', $methods);
	}
	
	return $methods;
}




/**
* hook_block() implementation
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify block
* @param array $edit only for "save" operation
*/
function volunteermatch_block($op = 'list', $delta = 0, $edit = array()) {
	if ($op == "list") {
		// Generate listing of blocks from this module, for the admin/block page
		$blocks = array();
		$blocks[0]["info"] = t('VolunteerMatch Tools');
		$blocks[1]["info"] = t('VolunteerMatch Member Details');
		$blocks[2]["info"] = t('VolunteerMatch API Details');
		return $blocks;
	}
	else if ($op == 'view') {
		// Generate our block content
		
		switch ($delta) {
		case 0:
			$block = array();
			$block['subject'] = 'VolunteerMatch Tools';
			$block_content = '';
					
			$methods = vm_get_methods();

			if (empty($methods)) {
				$block['content'] = 'API not available';
				return $block;
			}
		
			foreach ($methods as $index => $value) {
				$options = array("attributes" => array("title" => vm_reformatMethodName($value)));
				$link = l(vm_reformatMethodName($value), "vm/".$value, $options);
				$block_content .= "<div class=\"vm-links\">" .$link . "</div>";
			}
		
			$options = array("attributes" => array("title" => 'Login to VM!'));
			$link = l('Login to VM!', 'vm/login', $options);
			$block_content .= "<br><div class=\"vm-links\">" .$link . "</div>";

			$block['content'] = $block_content;
			return $block;
		
		case 1:
			$logged_in = $_COOKIE['vm_username'];
			if ($logged_in == NULL)
				return;
				
			$block = array();
			$block['subject'] = 'VM Member Info';
			$block_content = '<p>';
			
			$block_content .= 'Logged in as: ' . $logged_in . '<br>';
			$options = array("attributes" => array("title" => 'Logout'));
			$link = l('Logout', 'vm/logout', $options);
			$block_content .= "<div class=\"vm-links\">" .$link . "</div>";
			
			$block['content'] = $block_content;
			return $block;
			
		case 2:
			$block = array();
			$block['subject'] = 'VM API Details';
			//$block_content .= VolunteerMatchAPI::testing();
			//$block_content .= VolunteerMatchAPI::getMetadata();
			//$block_content .= VolunteerMatchAPI::getKeyStatus();
			$members = array('shpaisner@yahoo.com');
			//$block_content .= VolunteerMatchAPI::getMembersDetails($members);
			//$block_content .= VolunteerMatchAPI::getMembersReferrals($members);
			//$opps = array('698159');
			//$block_content .= VolunteerMatchAPI::getOpportunitiesReferrals($opps);
			
			$block['content'] = $block_content;
			return $block;
		}
	}
}

/**
* Implementation of hook_init()
* only used during development - live versions would not init these values.
*/
function volunteermatch_init() {
	include('VolunteerMatchAPI.php');
	VolunteerMatchAPI::init(variable_get('vm_path', NULL),
							variable_get('vm_key', NULL),
							variable_get('vm_user', NULL));
}

/**
* hook_perm() implementation - valid permissions for this module
* @return array an array of valid permissions
*/
function volunteermatch_perm() {
	return array('access volunteermatch content');
} // function volunteermatch_perm()

/**
* non-hook - page arguments callback function for configurable elements of module
*/
function vm_admin() {
	$form = array();
	
	$form['vm_user'] = array(
		'#type' => 'textfield',
		'#title' => t('Username for API key'),
		'#default_value' => variable_get('vm_user', ''),
		'#description' => t("The username for VolunteerMatch API queries with given key"),
		'#required' => TRUE
	);
	
	$form['vm_key'] = array(
		'#type' => 'textfield',
		'#title' => t('API Key'),
		'#default_value' => variable_get('vm_key', ''),
		'#maxlength' => 32,
		'#description' => t("This key must be provided by VolunteerMatch, and allows access to the API"),
		'#required' => TRUE
	);
	
	$form['vm_path'] = array(
		'#type' => 'textfield',
		'#title' => t('Path to API calls'),
		'#default_value' => variable_get('vm_path', ''),
		'#description' => t("The base URL for all VolunteerMatch API queries"),
		'#required' => TRUE
	);
	
	$form['vm_version'] = array(
		'#type' => 'textfield',
		'#title' => t('Version of VolunteerMatch API'),
		'#default_value' => variable_get('vm_version', ''),
		'#description' => t("Version of the VolunteerMatch API in use"),
		'#required' => FALSE	
	);
	
	$form['vm_locale'] = array(
		'#type' => 'textfield',
		'#title' => t('Locale information'),
		'#default_value' => variable_get('vm_locale', ''),
		'#description' => t("Locale information such as 'en', or 'fr_CA', or 'es_ES_Traditional_WIN'"),
		'#required' => FALSE	
	);
	
	$form['vm_use_token'] = array(
		'#type' => 'checkbox',
		'#title' => 'Use a login token',
		'#description' => 'The login token is set to expire after 15 minutes, and user will then have to re-enter their password.',
		'#default_value' => variable_get('vm_use_token', 0),
		'#required' => FALSE
	);
	
	return system_settings_form($form);
} // function vm_admin()

/**
* hook_menu()
* @return menu items for this module
*/
function volunteermatch_menu() {
	$items = array();
	
	$items['admin/settings/volunteermatch'] = array(
		'title' => t('VolunteerMatch Tools'),
		'description' => t('Description of the VolunteerMatch Tools available through the API'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM
	);
	
	$methods = array(
//		'addMemberFavorites',
//		'createMember',
//		'createOrUpdateMember',
//		'createReferral',
//		'forwardOpportunity',
//		'getKeyStatus',
//		'getLoginToken',
//		'getMemberDetail',
//		'getMemberFavorites',
		'getOpportunityDetail',
		'getOrganizationDetail',
		'getOrganizationReferrals',
		'getOrganizationReviews',
		'getServiceStatus',
//		'inviteGroup',
//		'removeMemberFavorites',
//		'retrievePassword',
//		'searchMembers',
//		'searchOpportunities',
//		'searchOrganizations',
//		'updateMember',
//		'updateReferral'
		'createOrUpdateMembers',
		'createOrUpdateReferrals',
		'getKeyStatus',
		'getMembersDetails',
		'getMembersReferrals',
		'getMetaData',
		'getOpportunitiesReferrals',
		'searchMembers',
		'searchOpportunities',
		'searchOrganizations',
	);

	foreach ($methods as $index => $method) {
		$items['vm/'.$method] = array(
			'title' => vm_reformatMethodName($method),
			'description' => vm_reformatMethodName($method),
			'page callback' => 'vm_'.$method,
			'access arguments' => array('access volunteermatch content'),
			'type' => MENU_CALLBACK
		);
	}
	
	$items['vm/search-opps-simple'] = array(
		'title' => t('Search VolunteerMatch Opportunities - simple form'),
		'description' => t('A simple form for searching VM opportunities'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_search_opps_simple'),
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);

	$items['vm/search-opps-advanced'] = array(
		'title' => t('Search VolunteerMatch Opportunities - advanced form'),
		'description' => t('An advanced form for searching VM opportunities'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_search_opps_advanced'),
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);
	
	$items['vm/search-orgs-simple'] = array(
		'title' => t('Search VolunteerMatch Organizations - simple form'),
		'description' => t('A simple form for searching VM organizations'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_search_orgs_simple'),
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);

	$items['vm/search-orgs-advanced'] = array(
		'title' => t('Search VolunteerMatch Organizations - advanced form'),
		'description' => t('An advanced form for searching VM organizations'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_search_orgs_advanced'),
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);

	$items['vm/referral-form'] = array(
		'title' => t('Tell the organization about yourself!'),
		'page callback' => 'vm_createReferralForm',
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);
	
	$items['vm/login'] = array(
		'title' => t('Login to VolunteerMatch'),
		'description' => t('Login form to access member-specific information from VM'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('vm_login'),
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);
	
	$items['vm/logout'] = array(
		'title' => t('Logged out of VolunteerMatch'),
		'page callback' => 'vm_logout',
		'access arguments' => array('access volunteermatch content'),
		'type' => MENU_CALLBACK
	);
	
	return $items;
}

/**
* create the search query - used for both simple and advanced searchs
*/
function vm_create_search_query($form_state) {
	if (!empty($form_state['values']['keywords'])) {
		$keywords = explode(',', $form_state['values']['keywords']);
		foreach ($keywords as $index => $keyword) {
			$query2['keywords'] = $keyword;
		}
	}
	// default to sort by recency
	$query2['sortCriteria'] = 'recency';
	if (!empty($form_state['values']['distance']))
		$query2['radius'] = $form_state['values']['distance']; 
	if (!empty($form_state['values']['search_virtual']))
		$query2['virtual'] = 'true';
	if (!empty($form_state['values']['skills'])) {
		$skills = explode(',', $form_state['values']['skills']);
		$query2['skills'] = array_values($skills);
	}
	if (!empty($form_state['values']['org_name']))
		$query2['orgNames'] = $form_state['values']['org_name'];
	if (!empty($form_state['values']['preferred_partners']))
		$query2['partners'] = $form_state['values']['preferred_partners'];
	if (!empty($form_state['values']['interest_area'])) {
		$values = array();
		foreach ($form_state['values']['interest_area'] as $index => $set) {
			if ($set)
				$values[] = $index;
		}
		if (!empty($values))
			$query2['categoryIds'] = $values;
	}
	if (!empty($form_state['values']['great_for'])) {
		$values = array();
		foreach ($form_state['values']['great_for'] as $index => $set) {
			if ($set)
				$values[] = $index;
		}
		if (!empty($values))
			$query2['greatFor'] = $values;
	}
	$query2['location'] = $form_state['values']['location'];
	$query_json = urlencode(json_encode($query2));
	
	return $query_json;
}

/**
* return the simple search opportunities form
*/
function vm_search_opps_simple() {
	$form = array();
	
	$form['vm_search_opps_simple'] = array(
		'#type' => 'fieldset',
		'#title' => '<h2>Find an Opportunity</h2>',
	);
	
	$form['vm_search_opps_simple']['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#description' => t('Provide a location'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_simple']['keywords'] = array(
		'#type' => 'textfield',
		'#title' => t('Keywords'),
		'#description' => t('Provide one or more keywords'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_simple']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#weight' => 10,
	);
	
	$form['vm_search_opps_simple']['link_advanced'] = array(
		'#value' => '<p>' . l('Advanced Search', 'vm/search-opps-advanced'),
		'#weight' => 12
	);
	
	return $form;
}

function vm_search_opps_simple_submit($form, &$form_state) {
	$query = vm_create_search_query($form_state);
	$form_state['redirect'] = 'vm/searchOpportunities/' . $query;
}

/**
* return the simple search opportunities form
*/
function vm_search_orgs_simple() {
	$form = array();
	
	$form['vm_search_orgs_simple'] = array(
		'#type' => 'fieldset',
		'#title' => '<h2>Find an Organization</h2>',
	);
	
	$form['vm_search_orgs_simple']['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#description' => t('Provide a location'),
		'#required' => TRUE
	);
	
	$form['vm_search_orgs_simple']['keywords'] = array(
		'#type' => 'textfield',
		'#title' => t('Keywords'),
		'#description' => t('Provide one or more keywords'),
		'#required' => FALSE
	);
	
	$form['vm_search_orgs_simple']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#weight' => 10,
	);
	
	$form['vm_search_orgs_simple']['link_advanced'] = array(
		'#value' => '<p>' . l('Advanced Search', 'vm/search-orgs-advanced'),
		'#weight' => 12
	);
	
	return $form;
}

function vm_search_orgs_simple_submit($form, &$form_state) {
	$query = vm_create_search_query($form_state);
	$form_state['redirect'] = 'vm/searchOrganizations/' . $query;
}

function vm_search_opps_advanced($type = 'vm_opp_search_advanced') {
	$form = array();
	
	$form['vm_search_opps_advanced'] = array(
		'#type' => 'fieldset',
		'#title' => '<h2>Advanced Opportunity Search</h2>',
		'#description' => t('Please select any category that you would like to use to narrow down your search.'),
	);
	
	$form['vm_search_opps_advanced']['loc_tag'] = array(
		'#value' => '<h3>Opportunity Location</h3>' . '<br>',
	);
	
	$form['vm_search_opps_advanced']['loc_desc_tag'] = array(
		'#value' => t('Please fill out as many fields as you\'d like.'),
	);
	
	$form['vm_search_opps_advanced']['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#description' => t('Provide a location'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_advanced']['distance'] = array(
		'#type' => 'select',
		'#title' => t('Distance from Location'),
		'#options' => array(
			'5.0' => '5 Miles',
			'10.0' => '10 Miles',
			'20.0' => '20 Miles',
			'60.0' => '60 Miles',
			'city' => 'City',
			'subregion' => 'County',
			'msa' => 'Metro Area',
			'region' => 'State',
		),
		'#default_value' => '20.0'
	);
	
	$form['vm_search_opps_advanced']['search_virtual'] = array(
		'#type' => 'checkbox',
		'#title' => t('Search for Virtual Opportunities')
	);
	
	
	$form['vm_search_opps_advanced']['opp_keys'] = array(
		'#value' => '<h3>Opportunity Keywords</h3>'
	);
	
	$form['vm_search_opps_advanced']['keywords'] = array(
		'#type' => 'textfield',
		'#title' => t('Keywords'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_advanced']['skills'] = array(
		'#type' => 'textfield',
		'#title' => t('Skills'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_advanced']['org_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Organization Name'),
		'#required' => FALSE
	);
	
	$form['vm_search_opps_advanced']['preferred_partners'] = array(
		'#type' => 'select',
		'#title' => t('Preferred Partners'),
		'#options' => vm_get_metadata('partners')
	);
	
	$form['vm_search_opps_advanced']['interest_area'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Opportunity Interest Area'),
		'#options' => vm_get_metadata('categories')
	);
	
	$form['vm_search_opps_advanced']['great_for'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Great For'),
		'#options' => array(
			'k' => t('Kids'),
			't' => t('Teens'),
			's' => '55+',
			'g' => t('Groups')
		)
	);
	
	$form['vm_opp_search_advanced']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_search_opps_advanced_submit($form, &$form_state) {
//	print_r($form);
//	print_r($form_state);

	$query = vm_create_search_query($form_state);
	$form_state['redirect'] = 'vm/searchOpportunities/' . $query;
}

function vm_search_orgs_advanced() {
	$form = array();
	
	$form['vm_search_orgs_advanced'] = array(
		'#type' => 'fieldset',
		'#title' => '<h2>Advanced Organization Search</h2>',
		'#description' => t('Please select any category that you would like to use to narrow down your search.'),
	);
	
	$form['vm_search_orgs_advanced']['loc_tag'] = array(
		'#value' => '<h3>Organization Location </h3>' . '<br>',
	);
	
	$form['vm_search_orgs_advanced']['loc_desc_tag'] = array(
		'#value' => t('Please fill out as many fields as you\'d like.'),
	);
	
	$form['vm_search_orgs_advanced']['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#description' => t('Provide a location'),
		'#default_value' => '',
		'#required' => TRUE
	);
	
	$form['vm_search_orgs_advanced']['distance'] = array(
		'#type' => 'select',
		'#title' => t('Distance from Location'),
		'#options' => array(
			'5.0' => '5 Miles',
			'10.0' => '10 Miles',
			'20.0' => '20 Miles',
			'60.0' => '60 Miles',
			'city' => 'City',
			'subregion' => 'County',
			'msa' => 'Metro Area',
			'region' => 'State',
		),
		'#default_value' => '20.0'
	);
	
	$form['vm_search_orgs_advanced']['opp_keys'] = array(
		'#value' => '<h3>' . t('Organization Keywords') . '</h3>'
	);
	
	$form['vm_search_orgs_advanced']['keywords'] = array(
		'#type' => 'textfield',
		'#title' => t('Keywords'),
		'#default_value' => '',
		'#required' => FALSE
	);
	
	$form['vm_search_orgs_advanced']['org_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Organization Name'),
		'#default_value' => '',
		'#required' => FALSE
	);
	
	$form['vm_search_orgs_advanced']['preferred_partners'] = array(
		'#type' => 'select',
		'#title' => t('Preferred Partners'),
		'#options' => vm_get_metadata('partners')
	);
	
	$form['vm_search_orgs_advanced']['interest_area'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Organization Interest Area'),
		'#options' => vm_get_metadata('categories')
	);
	
	$form['vm_search_orgs_advanced']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_search_orgs_advanced_submit($form, &$form_state) {
	$query = vm_create_search_query($form_state);
	$form_state['redirect'] = 'vm/searchOrganizations/' . $query;
}

function vm_disambiguate_location($form_state, $possible_locations, $query) {
	foreach ($possible_locations as $index => $location) {
		//$new_query = ereg_replace("lo=.*", 
		//						  "lo=" . urlencode($location), 
		//						  $query);
		$query['location'] = $location;
		$new_query = urlencode(json_encode($query));
		$possible_queries[$new_query] = $location;
	}
	
	$form = array();
	
	$form['vm_disambiguate_location']['location'] = array(
		'#type' => 'select',
		'#title' => t('Please select a location'),
		'#description' => t('Your location was ambiguous - please choose the desired location'),
		'#options' => $possible_queries,
	);
	
	$form['vm_disambiguate_location']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Select'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_disambiguate_location_submit($form, &$form_state) {
	$query = $form_state['values']['location'];
	$form_state['redirect'] = 'vm/searchOpportunities/' . $query; 
}

/**
		'createOrUpdateMembers',
		'createOrUpdateReferrals',
		'getKeyStatus',
		'getMembersDetails',
		'getMembersReferrals',
		'getMetaData',
		'getOpportunitiesReferrals',
		'searchMembers',
		'searchOpportunities',
		'searchOrganizations',
*/

/**
* vm_createOrUpdateMember
*/
function vm_createOrUpdateMember($query = NULL) {
	$page_content = '';
	$page_content .= "Not Yet Implemented";
	return $page_content;
}

/**
* vm_createOrUpdateReferrals
*/
function vm_createOrUpdateReferrals($query = NULL) {
	$query = json_decode(urldecode($query), TRUE);
	$data = VolunteerMatchAPI::createOrUpdateReferrals($query['oppId'], array($query['referrals']));
	return $data;
}

/**
* vm_getKeyStatus
*/
function vm_getKeyStatus($query = NULL) {
	$data = VolunteerMatchAPI::getKeyStatus();
	return $data;
} 

/**
* vm_getMembersDetails
*/
function vm_getMembersDetails($query = NULL) {
	if ($query == NULL)
		return drupal_get_form('vm_get_member_details_form');
	
	$query = json_decode(urldecode($query), TRUE);
	$data = VolunteerMatchAPI::getMembersDetails($query);
	return $data;
}

function vm_get_member_details_form() {
	$form = array();
	
	$form['vm_get_member_details_form']['primaryKeys'] = array(
		'#type' => 'textfield',
		'#title' => t('Please enter the (comma separated) email addresses or primary keys for members details'),
		'#required' => TRUE
	);
	
	$form['vm_get_member_details_form']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_get_member_details_form_submit($form, &$form_state) {
	$query = explode(',', $form_state['values']['primaryKeys']);
	$form_state['redirect'] = 'vm/getMembersDetails/' . urlencode(json_encode($query)); 		
}

/**
* vm_getMembersReferrals
*/
function vm_getMembersReferrals($query = NULL) {
	if ($query == NULL)
		return drupal_get_form('vm_get_members_referrals_form');
	
	$query = json_decode(urldecode($query), TRUE);
	$data = VolunteerMatchAPI::getMembersReferrals($query);
	return $data;
}

function vm_get_members_referrals_form() {
	$form = array();
	
	$form['vm_get_members_referrals_form']['primaryKeys'] = array(
		'#type' => 'textfield',
		'#title' => t('Please enter the (comma separated) email addresses or primary keys for members referrals'),
		'#required' => TRUE
	);
	
	$form['vm_get_members_referrals_form']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_get_members_referrals_form_submit($form, &$form_state) {
	$query = explode(',', $form_state['values']['primaryKeys']);
	$form_state['redirect'] = 'vm/getMembersReferrals/' . urlencode(json_encode($query)); 		
}

/**
* vm_getMetaData
*/
function vm_getMetaData($query = NULL) {
	$page_content = '';
	return $page_content;
}

/**
* vm_getOpportunitiesReferrals
*/
function vm_getOpportunitiesReferrals($query = NULL) {
	$data = VolunteerMatchAPI::getOpportunitiesReferrals(array($query));
	return $data;
}

/**
* vm_searchMembers
*/
function vm_searchMembers($query = NULL) {
	$page_content = '';
	$page_content .= "Not Yet Implemented";
	return $page_content;
}

/**
* vm_getOrganizationReferrals
*/
function vm_getOrganizationReferrals($query = NULL) {
	$data = VolunteerMatchAPI::getOrganizationReferrals(array($query));
	return $data;
}

/**
* vm_getOrganizationReviews
*/
function vm_getOrganizationReviews($query = NULL) {
	$page_content = '';
	$data = VolunteerMatchAPI::getOrganizationReviews((int)$query);
	$page_content .= $data;
	return $page_content;
}

/**
* create an array of locations from which to disambiguate
*/
function vm_create_locations_array($data) {
	foreach ($data as $index => $location)
		$locations[] = $location['address'];
	return $locations;
}


/**
* vm_searchOpportunities
*/
function vm_searchOpportunities($query = NULL) {
	$page_content = '';
	
	if (empty($query))
		return drupal_get_form('vm_search_opps_simple');
	
	$query = json_decode(urldecode($query), TRUE);
	$data = VolunteerMatchAPI::searchOpportunities($query);
			
	if (isset($data['locations'])) {
		$page_content .= "LOCATION_NEEDS_DISAMBIGUATION - The location couldn't be geocoded to a single location. <br>";
		return drupal_get_form('vm_disambiguate_location', vm_create_locations_array($data['locations']), $query);
	}

	$page_content .= vm_format_opps($data, $query);
	return $page_content;
}

function vm_getOpportunityDetail($query = NULL) {
	$data = VolunteerMatchAPI::searchOpportunities(json_decode(urldecode($query), TRUE), 'opp detail');
	$page_content = vm_format_opp_details($data);
	return $page_content;
}

/**
* format an opportunity detail
*/ 
function vm_format_opp_details($data) {
	$formatted_opps = '';
	foreach ($data['opportunities'] as $index => $opp) {
		$formatted_opps .= '<hr>';
		$formatted_opps .= '<div class="searchitem" id="' . $opp['id'] . '">';

		$formatted_opps .= '<h3>';		
		$options = array("attributes" => array("title" => $opp['title']));
		$query = urlencode(json_encode(array('ids' => array($opp['id']))));
		$link = l($opp['title'], 'vm/getOpportunityDetail/'.$query, $options);
		$formatted_opps .= $link;
		$formatted_opps .= '</h3>';		

		$formatted_opps .= '<div class="oppDescription">';
		$formatted_opps .= $opp['description'];
		$formatted_opps .+ '</div>';
		
		if (!empty($opp['greatFor'])) {
			$first = TRUE;
			$great_for = '';
			foreach ($opp['greatFor'] as $index => $value) {
				if ($first)
					$first = FALSE;
				else
					$great_for .= ', ';
					
					
				switch ($value) {
				case 't':
					$great_for .= 'Teens';
					break;
				case 's':
					$great_for .= '55+';
					break;
				case 'g':
					$great_for .= 'Groups';
					break;
				case 'k':
					$great_for .= 'Kids';
					break;
				}
			}
			$formatted_opps .= '<div class="greatFor">';
			$formatted_opps .= 'Great For: ' . $great_for;
			$formatted_opps .= '</div>';
		}
		
		$formatted_opps .= '<div class="minimumAge">';
		$formatted_opps .= 'Minimum Age: ' . $opp['minimumAge'];
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '<div class="volunteersNeeded">';
		$formatted_opps .= 'Volunteers Needed: ' . $opp['volunteersNeeded'];
		$formatted_opps .= '</div>';
		
		$avail_string = '';
		if ($opp['availability']['ongoing'] == 'true')
			$avail_string = 'This is an Ongoing Opportunity';
		else {
			$start_time = strtotime($opp['availability']['startDate'] . ' ' . $opp['availability']['startTime']);
			$start_time_str = date('D M j, Y h:i A', $start_time);
			$end_time = strtotime($opp['availability']['endDate'] . ' ' . $opp['availability']['endTime']);
			$end_time_str = date('D M j, Y h:i A', $end_time);
			
			$avail_string = $start_time_str . ' - ';
			$avail_string .= $end_time_str;
		}
		$formatted_opps .= '<div class="availability">';
		$formatted_opps .= 'Availability: ' . $avail_string;
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '<div class="helpLink">';
		$options = array("attributes" => array("title" => 'I Want to Help!'));
		$queryFields = array(
			'oppId' => $opp['id'],
			'startDate' => $opp['availability']['startDate'],
			'endDate' => $opp['availability']['endDate'],
			'referralFields' => $opp['referralFields'],
			'hasWaitList' => $opp['hasWaitList'],
			'spacesAvailable' => $opp['spacesAvailable']
		);
		$query = urlencode(json_encode($queryFields));
		$link = l('I Want to Help!', 'vm/referral-form/'.$query, $options);
		$formatted_opps .= $link;
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '<div class="oppReferrals">';
		$options = array("attributes" => array("title" => 'Get Opportunity Referrals'));
		$link = l('Get Opportunity Referrals', 'vm/getOpportunitiesReferrals/'.$opp['id'], $options);
		$formatted_opps .= $link;
		$formatted_opps .= '</div>';		
		
		$formatted_opps .= '<div class="parentOrg">';
		$options = array("attributes" => array("title" => $opp['parentOrg']['name']));
		$link = l($opp['parentOrg']['name'], 'vm/getOrganizationDetail/'.$opp['parentOrg']['id'], $options);
		$formatted_opps .= 'Company: ' . $link;
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '<br>';
		
		// need skills and requirements
		if (!empty($opp['skillsNeeded'])) {
			$formatted_opps .= 'Skills Needed:<br>';
			$formatted_opps .= $opp['skillsNeeded'];
		}
		
		if (!empty($opp['requirements'])) {
			$formatted_opps .= '<br>Requirements:<br>';
			$formatted_opps .= $opp['requirements'];
		}
		
		
		$formatted_opps .= '</div>';
	}
	
	return $formatted_opps;
}

function vm_createReferralForm($query = NULL) {
	return drupal_get_form('vm_referral_form', $query);
}

function vm_referral_form($form_state, $query = NULL) {
	$query = json_decode(urldecode($query), TRUE);
	$form = array();
	
	$form['vm_referral_form'] = array(
		'#type' => 'fieldset',
		'#title' => '<h2>Referral Form</h2>',
		'#description' => t('Please provide the following information about yourself:'),
	);

	$form['vm_referral_form']['oppId'] = array(
		'#type' => 'hidden',
		'#value' => $query['oppId']
	);
	
	$form['vm_referral_form']['startDate'] = array(
		'#type' => 'hidden',
		'#value' => $query['startDate']
	);
	
	$form['vm_referral_form']['endDate'] = array(
		'#type' => 'hidden',
		'#value' => $query['endDate']
	);
	
	$form['vm_referral_form']['comments'] = array(
		'#type' => 'textarea',
		'#title' => t('Comments')
	);
	
	if (sizeof($query['referralFields']) > 0) {
		$iterator = 0;
		foreach ($query['referralFields'] as $index => $question) {
			$required = ($question['required'] == 1 ? TRUE : FALSE);
			$choices = (empty($question['choices']) ? NULL : array_combine($question['choices'], $question['choices']));
			$type = NULL;
			
			switch ($question['type']) {
				case 'singleline':
					$type = 'textfield';
					break;
				case 'multiline':
					$type = 'textarea';
					break;
				case 'singlechoice':
					if (sizeof($choices) <= 3)
						$type = 'radios';
					else
						$type = 'select';
					break;
				case 'multichoice':
					if (sizeof($choices) <= 3)
						$type = 'checkboxes';
					else
						$type = 'select';
					break;
			}
			
			switch ($iterator) {
			case 0:
				$form['vm_referral_form']['question0'] = array(
					'#type' => $type,
					'#title' => $question['label'],
					'#required' => $required,
					'#options' => $choices
				);
				$form['vm_referral_form']['question0_id'] = array(
					'#type' => 'hidden',
					'#value' => $question['id']
				);
				break;
			case 1:
				$form['vm_referral_form']['question1'] = array(
					'#type' => $type,
					'#title' => $question['label'],
					'#required' => $required,
					'#options' => $choices
				);
				$form['vm_referral_form']['question1_id'] = array(
					'#type' => 'hidden',
					'#value' => $question['id']
				);
				break;
			case 2:
				$form['vm_referral_form']['question2'] = array(
					'#type' => $type,
					'#title' => $question['label'],
					'#required' => $required,
					'#options' => $choices
				);
				$form['vm_referral_form']['question2_id'] = array(
					'#type' => 'hidden',
					'#value' => $question['id']
				);
				break;
			}
			
			$iterator++;
		}
	}
	
	if ($query['hasWaitList'] && ($query['spacesAvailable'] == NULL || $query['spacesAvailable'] <= 0)) {
		$form['vm_referral_form']['addToWaitList'] = array(
			'#type' => 'checkbox',
			'#title' => 'This opportunity has enough volunteers - would you like to be added to the waitlist?'
		);
	}
	
	$form['vm_referral_form']['vmPrimaryKey'] = array(
		'#type' => 'textfield',
		'#title' => t('VolunteerMatch Username or Primary Key'),
		'#required' => TRUE
	);
	
	$form['vm_referral_form']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#weight' => 10,
	);
	
	return $form;
}

function vm_referral_form_submit($form, &$form_state) {
	$referrals = array(
		'member' => array(
			'primaryKey' => $form_state['values']['vmPrimaryKey'],
		),
		'commitmentStartDate' => $form_state['values']['startDate'],
		'commitmentEndDate' => $form_state['values']['endDate'],
		'referralFields' => array()
	);
	
	// kludgy, but PHP cannot use dynamic array field names
	if (isset($form_state['values']['question0'])) {
		$referrals['referralFields'][] = array(
			'id' => '' . $form_state['values']['question0_id'],
			'values' => array($form_state['values']['question0']),
		);
	}
	
	if (isset($form_state['values']['question1'])) {
		$referrals['referralFields'][] = array(
			'id' => '' . $form_state['values']['question1_id'],
			'values' => array($form_state['values']['question1']),
		);
	}
	
	if (isset($form_state['values']['question2'])) {
		$referrals['referralFields'][] = array(
			'id' => '' . $form_state['values']['question2_id'],
			'values' => array($form_state['values']['question2']),
		);
	}
	
	$query = array(
		'oppId' => $form_state['values']['oppId'],
		'waitList' => $form_state['values']['addToWaitList'],
		'referrals' => $referrals
	);

	$form_state['redirect'] = 'vm/createOrUpdateReferrals/' . urlencode(json_encode($query)); 	

}

/**
* format search opportunities result
*/
function vm_format_opps($data, $query) {
	$formatted_opps = '';
	$currentPage = 1;
	if (!empty($query['pageNumber']))
		$currentPage = $query['pageNumber'];
	
	if ($currentPage == 1) {
		$oppsOnPage = count($data['opportunities']);
		setcookie('vm_items_per_opp_result_page', $oppsOnPage, 0, '/');
	} else {
		$oppsOnPage = $_COOKIE['vm_items_per_opp_result_page'];
	}
	
	$totalItems = $data['resultsSize'];
	$beginRange = $oppsOnPage * ($currentPage - 1) + 1;
	$endRange = $beginRange + $oppsOnPage - 1;
	if ($endRange > $totalItems)
		$endRange = $totalItems;
	
	$formatted_opps .= '<div class="resultSet">';
	if ($beginRange > 1) {
		$options = array("attributes" => array("title" => 'previous page'));
		$query['pageNumber'] = $currentPage - 1;
		$json_query = urlencode(json_encode($query));
		$link = l('previous page', 'vm/searchOpportunities/'.$json_query, $options);
		$formatted_opps .= $link;
		$formatted_opps .= ' ';
	}
	$formatted_opps .= 'Displaying ' . $beginRange . ' - ' . $endRange . ' of ' . $totalItems;
	if ($endRange < $totalItems) {
		$formatted_opps .= ' ';
		$options = array("attributes" => array("title" => 'next page'));
		$query['pageNumber'] = $currentPage + 1;
		$json_query = urlencode(json_encode($query));
		$link = l('next page', 'vm/searchOpportunities/'.$json_query, $options);
		$formatted_opps .= $link;
	}
	$formatted_opps .= '</div>';
	
	foreach ($data['opportunities'] as $index => $opp) {
		$formatted_opps .= '<hr>';
		$formatted_opps .= '<div class="searchitem" id="' . $opp['id'] . '">';

		$formatted_opps .= '<h3>';		
		$options = array("attributes" => array("title" => $opp['title']));
		$json_query = urlencode(json_encode(array('ids' => array($opp['id']))));
		$link = l($opp['title'], 'vm/getOpportunityDetail/'.$json_query, $options);
		$formatted_opps .= $link;
		$formatted_opps .= '</h3>';		

		$formatted_opps .= '<div class=short_description>';
		$desc = substr($opp["plaintextDescription"], 0, 140);
		$desc = str_replace("\\'", "'", $desc);
		if (strlen($opp['plaintextDescription']) > 140) {
			$desc .= "... ";
			$options = array("attributes" => array("title" => "More >"));
			$json_query = urlencode(json_encode(array('location' => $opp['location']['postalCode'], 'id' => $opp['id'])));
			$link = l("More >", "vm/getOpportunityDetail/".$json_query, $options);
			$desc .= $link;
		}
		$formatted_opps .= $desc;
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '<div class=opp_org>';
		$options = array("attributes" => array("title" => ''.$opp['parentOrg']['name']));
		$link = l($opp['parentOrg']['name'], 'vm/getOrganizationDetail/'.$opp['parentOrg']['id'], $options);
		$formatted_opps .= $link;
		// get number of reviews and average score for orgs
		$reviews = VolunteerMatchAPI::getOrganizationReviewsSummary($opp['parentOrg']['id']);
		if (!empty($reviews['organizations'])) {
			$formatted_opps .= ' ' . format_review_stars($reviews['organizations'][0]['avgRating']) . ' ';
			$link = l('' . $reviews['organizations'][0]['numReviews'] . ' reviews', 'vm/getOrganizationReviews/'.$opp['parentOrg']['id']);
			$formatted_opps .= '(' . $link . ')';
		}
		$formatted_opps .= '</div>';
		
		$formatted_opps .= '</div>';
	}
	
	return $formatted_opps;
}

function format_review_stars($averageRating) {
	$html_stars = '';
	$segments = $averageRating / 20;
	$remainder = $averageRating % 20;
	$half = (abs($remainder - 10) < 4 ? TRUE : FALSE);
	
	for ($i = 1; $i <= 5; ++$i) {
		if ($segments >= $i)
			$file = 'full';
		else if ($segments + 1 >= $i) {
			if ($remainder > 16)
				$file = 'full';
			else if ($half)
				$file = 'half';
			else
				$file = 'empty';
		}
		else
			$file = 'empty';
		
		$html_stars .= '<img src="sites/all/modules/volunteermatch/star-' . $file . '">';
	}
	
	return $html_stars;
}

/**
* vm_searchOrganizations
*/
function vm_searchOrganizations($query = NULL) {
	$page_content = '';
	
	if (empty($query))
		return drupal_get_form('vm_search_orgs_simple');
	
	$query = json_decode(urldecode($query), TRUE);
	$data = VolunteerMatchAPI::searchOrganizations($query);
			
	if (isset($data['locations'])) {
		$page_content .= "LOCATION_NEEDS_DISAMBIGUATION - The location couldn't be geocoded to a single location. <br>";
		return drupal_get_form('vm_disambiguate_location', vm_create_locations_array($data['locations']), $query);
	}

	//print_r($data);
	$page_content .= vm_format_orgs($data, $query);
	return $page_content;
}

function vm_getOrganizationDetail($query = NULL) {
	$new_query = array('ids' => array($query));
	$data = VolunteerMatchAPI::searchOrganizations($new_query, 'org detail');
	$page_content = vm_format_org_details($data);
	return $page_content;
}

function vm_format_orgs($data, $query) {
	//print_r($data);
	$formatted_orgs = '';
	$currentPage = 1;
	if (!empty($query['pageNumber']))
		$currentPage = $query['pageNumber'];
	$orgsOnPage = count($data['organizations']);
	$beginRange = $orgsOnPage * ($currentPage - 1) + 1;
	$endRange = $beginRange + $orgsOnPage - 1;
	
	$formatted_orgs .= '<div class="resultSet">';
	if ($beginRange > 1) {
		$options = array("attributes" => array("title" => 'previous page'));
		$query['pageNumber'] = $currentPage - 1;
		$json_query = urlencode(json_encode($query));
		$link = l('previous page', 'vm/searchOrganizations/'.$json_query, $options);
		$formatted_orgs .= $link;
		$formatted_orgs .= ' ';
	}
	$formatted_orgs .= 'Displaying ' . $beginRange . ' - ' . $endRange . ' of ' . $data['resultsSize'];
	if ($endRange < $data['resultsSize']) {
		$formatted_orgs .= ' ';
		$options = array("attributes" => array("title" => 'next page'));
		$query['pageNumber'] = $currentPage + 1;
		$json_query = urlencode(json_encode($query));
		$link = l('next page', 'vm/searchOrganizations/'.$json_query, $options);
		$formatted_orgs .= $link;
	}
	$formatted_orgs .= '</div>';

	foreach ($data['organizations'] as $index => $org) {
		$formatted_orgs .= '<hr>';
		$formatted_orgs .= '<div class="orgdetail" id="' . $org['id'] . '">';

		$formatted_orgs .= '<h3>';		
		$name = str_replace("\\'", "'", $org['name']);
		$name = str_replace('\\"', '"', $name);
		$options = array("attributes" => array("title" => $name));
		$json_query = urlencode(json_encode(array('ids' => array($org['id']))));
		$link = l($name, 'vm/getOrganizationDetail/'.$json_query, $options);
		$formatted_orgs .= $link;
		$formatted_orgs .= '</h3>';		

		$formatted_orgs .= '<div class=org_description>';
		$desc = substr($org['plaintextDescription'], 0, 140);
		$desc = str_replace("\\'", "'", $desc);
		$desc = str_replace('\\"', '"', $desc);
		if (strlen($org['plaintextDescription']) > 140) {
			$desc .= "... ";
			$options = array("attributes" => array("title" => "More >"));
			$json_query = urlencode(json_encode(array('ids' => array($org['id']))));
			$link = l("More >", "vm/getOrganizationDetail/".$json_query, $options);
			$desc .= $link;
		}
		$formatted_orgs .= $desc;
		$formatted_orgs .+ '</div>';
				
		if (isset($org['url'])) {
			$formatted_orgs .= '<div class=org_url>';
			$options = array("attributes" => array("title" => $org['name']));
			$link = l($org['name'], ''.$org['url'], $options);
			$formatted_orgs .= $link;
			$formatted_orgs .= '</div>';
		}
		
		$formatted_orgs .= '</div';
	}
	
	return $formatted_orgs;
}

function vm_format_org_details($data) {
	//print_r($data);
	$formatted_orgs = '';
	foreach ($data['organizations'] as $index => $org) {
		$formatted_orgs .= '<hr>';
		$formatted_orgs .= '<div class="orgdetail" id="' . $org['id'] . '">';

		$formatted_orgs .= '<h3>';		
		$name = str_replace("\\'", "'", $org['name']);
		$name = str_replace('\\"', '"', $name);
		$options = array("attributes" => array("title" => $name));
		$json_query = urlencode(json_encode(array('ids' => array($org['id']))));
		$link = l($name, 'vm/getOrganizationDetail/'.$json_query, $options);
		$formatted_orgs .= $link;
		$formatted_orgs .= '</h3>';		

		$formatted_orgs .= '<h4>Description</h4>';
		$formatted_orgs .= '<div class=org_description>';
		$formatted_orgs .= ''.$org['description'];
		$formatted_orgs .+ '</div>';
		
		$formatted_orgs .= '<h4>Mission Statement</h4>';
		$formatted_orgs .= '<div class=org_mission>';
		$formatted_orgs .= ''.$org['mission'];
		$formatted_orgs .+ '</div>';
		
		if (isset($org['url'])) {
			$formatted_orgs .= '<div class=org_url>';
			$options = array("attributes" => array("title" => $org['name']));
			$link = l($org['name'], ''.$org['url'], $options);
			$formatted_orgs .= $link;
			$formatted_orgs .= '</div>';
		}
		
		$formatted_orgs .= '</div';
	}
	
	return $formatted_orgs;
}


